generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   // can be used as avatar
  avatar        String?   // ✅ Add this
  password      String?
  role          String    @default("user")  // ✅ Add this
  bio           String?   // ✅ Add this
  phone         String?   // ✅ Add this
  location      String?   // ✅ Add this
  status        String    @default("active") // ✅ Add this
  joinDate      DateTime  @default(now())    // ✅ Add this
  lastLogin     DateTime? // ✅ Add this
  accounts      Account[]
  sessions      Session[]
}

model Settings {
  id                  Int     @id @default(autoincrement())
  theme               String
  notificationsEnabled Boolean
  emailPreferences     Boolean
  systemName           String
  apiKey               String
  defaultCurrency      String
  maxUsers             Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dealer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  location  String?
  createdAt DateTime @default(now())

  // ✅ One dealer can have many inventories
  properties Inventory[] @relation("DealerProperties")
}

model Inventory {
  id          Int              @id @default(autoincrement())
  title       String
  type        String?
  size        String
  location    String
  price       Int
  beds        Int              @default(0)
  floors      Int              @default(0)
  status      InventoryStatus  @default(Available)
  description String?
  features    String?
  images      Json?            // Array of URLs
  dealerId    Int?
  dealer      Dealer?          @relation("DealerProperties", fields: [dealerId], references: [id])

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt  @default(now())
}

enum InventoryStatus {
  Available
  Pending
  Sold
}


model Demand {
  id          Int      @id @default(autoincrement())
  size        String
  location    String
  budget      Float
  type        String? // Optional: House/Plot/Commercial
  clientName  String?
  clientPhone String?
  createdAt   DateTime @default(now())
}

model RecentActivity {
  id     Int      @id @default(autoincrement())
  user   String
  action String
  target String
  type   String
  time   DateTime @default(now())
}
